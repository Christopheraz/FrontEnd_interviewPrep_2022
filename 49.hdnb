49个常用的JavaScript方法封装

1、输入一个值，返回其数据类型**；

```js
function type(para) {
    return Object.prototype.toString.call(para)
}
```

2、数组去重；

```js
function unique1(arr) {
    return [...new Set(arr)]
}

function unique2(arr) {
    const obj = {};
    return arr.filter(ele => {
        if (!obj[ele]) {
            obj[ele] = true;
            return true;
        }
    })
}

function unique3(arr) {
    const result = [];
    arr.forEach(ele => {
        if (result.indexOf(ele) == -1) {
            result.push(ele)
        }
    });
    return result;
}
```

3、字符串去重；

```js
String.prototype.unique = function() {
    const obj = {};
    const str = '';
    const len = this.length;
    for (let i = 0; i < len; i++) {
        if (!obj[this[i]]) {
            str += this[i];
            obj[this[i]] = true;
        }
    }
    return str;
}
function uniq(str) {
    return str.replace(/(\w)\1+/g, '$1')
}
```

4 深拷贝 浅拷贝；

```js
const { parentPort } = require("worker_threads");

function deepClone(obj, result) {
    let res = result || {};
    for (const prop in obj) {
        if (obj.hasOwnProperty(prop)) {
            if (typeof obj[prop] == 'object' && obj[prop] !== null) {
                if (Object.prototype.toString.call(obj[prop]) == '[object Object') {
                    result[prop] = {};
                } else {
                    result[prop] = [];
                }
                deepClone(obj[prop], result[prop]);
            } else {
                result[prop] = obj[prop];
            }
        }
    }
    return result;
}
function deepClone(target) {
    if (typeof (target) !== 'object') {
        return target;
    }
    let result;
    if (Object.prototype.toString.vall(target) == '[object Array]') {
        result = [];
    } else {
        result = {};
    }
    for (const prop in target) {
        if (target.hasOwnProperty(prop)) {
            result[prop] = deepClone(target[prop])
        }
    }
    return result;
}
// const o1 = JSON.parse(JSON.stringify(obj));
```

5、reverse 底层原理和扩展；

```js
Array.prototype.myReverse = function() {
    const len = this.length;
    for (let i = 0; i < len; i++) {
        const temp = this[i];
        this[i] = this[len - 1 - i];
        this[len - 1 - i] - temp;
    }
    return this;
}
```

6、圣杯模式的继承；

```js
function inherit(Target, origin) {
    function F() {};
    F.prototype = Origin.prototype;
    Target.prototype = new F();
    Target.prototype.constructor = Target;
    Target.prop.uber = Origin.prototype;
}
```

7、找出字符串中第一次只出现一次的字母；

```js
String.prototype.firstAppear = function() {
    const obj = {};
    let len = this.length;
    for (let i = 0; i < len; i++) {
        if (obj[this[i]]) {
            obj[this[i]]++;
        } else {
            obj[this[i]] = 1;
        }
    }
    for (let prop in obj) {
        if (obj[prop] == 1) {
            return prop;
        }
    }
}
```

8、找元素的第n级父元素；

```js
function parents(ele, n) {
    while (ele && n) {
        ele = ele.parentElement ? ele.parentElement : ele.parentNode;
        n--;
    }
    return ele;
}
```

9、返回元素的第n个兄弟节点;

```js
function retSibling(e, n) {
    while (e && n) {
        if (n > 0) {
            if (e.nextElementSibling) {
                e = e.nextElementSibling;
            } else {
                for (e = e.nextSibling; e && e.nodeType !== 1; e = e.nextSibling);
            }
            n--;
        } else {
            if (e.previousElementSibling) {
                e = e.previousElementSibling;
            } else {
                for (e = e.previousElementSibling; e && e.nodeType !== 1; e = e.previousElementSibling);
            } 
            n++;
        }
    }
    return e;
}
```

10、封装mychildren，解决浏览器的兼容问题；

```js
function myChildren(e) {
    const children  = e.children;
    const arr = [];
    const len = children.length;
    for (let i = 0; i < len; i++) {
        if (children[i].nodeType === 1) {
            arr.push(children[i]);
        }
    }
    return arr;
}
```

11、判断元素有没有子元素；

```js
function hasChildren(e) {
    const children = e.childNode;
    const len = children.length;
    for (let i = 0; i < len; i++) {
        if (children[i].nodeType === 1) {
            return true;
        }
    }
    return false;
}
```

12、我一个元素插入到另一个元素的后面；

```js
Element.prototype.insertAfter = function(target, ele) {
    const nextEle = ele.nextElementSibling;
    if (nextEle == null) {
        this.appendChild(target);
    } else {
        this.insertBefore(target, nextEle);
    }
}
```

13、返回当前的时间（年月日时分秒）；

```js
function getDateTime() {
    const date = new Date();
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    const hour = date.getHours() + 1;
    const minute = date.getMinutes();
    const second = date.getSeconds();
    // const month = checklime(month):
    // const day = checkTime(day);
    // const hour = checkTime(hour);
    // const minute = checkTime (minute) ;
    // const second = checklime(second);
    function checklime(i) {
        if (i < 10) {
            i = "0" + i;
        }
        return i;
    }
    return "" +  year + "年" + month + "月" + day + "日" + hour + "时" + minute + "分" + second + "秒";
}
```

14、获得滚动条的滚动距离；

```js
function getScrollOffset() {
    if (window.pageXOffset) {
        return {
            x: window.pageXOffset,
            y: window.pageXOffset
        } 
    
    } else {
        return {
            x: document.body.scrollLeft + document.documentElement.scrollLeft,
            y: document.body.scrollTop + document.documentElement.scrollTop
        }
    }
}
```

15、获得视口的尺寸；

```js
function getViewportOffset() {
    if (window.innerWidth) {
        return {
            w: window.innerWidth,
            h: window.innerHeight
        }
    } else {
        if (document.compatMode === "BackCompat") {
            return {
                w: document.body.clientWidth,
                h: document.body.clientHeight
            }
        } else {
            return {
                w: document.documentElement.clientWidth,
                h: document.documentElement.clientHeight
            }
        }
    }
}
```

16、获取任一元素的任意属性；

```js
function getStyle(ele, prop) {
    return window.getComputedStyle ? window.getComputedStyle(ele, null)[prop] : ele.getComputedStyle
}
```

17、绑定事件的兼容代码；

```js
function addEvent(ele, type, handle) {
    if (ele.addEventListener) {
        ele.addEventListener(type, handle, false);
    } else if (ele.attachEvent){
        ele.attachEvent('on' + type, function(){
            handle.call(ele);
        })
    } else {
        ele['on' + type] = handle;
    }
}
```

18、解绑事件；

```js
function removeEvent(ele, type, handle) {
    if (ele.removeEventListener) {
        ele.removeEventListener(type, handle, false);
    } else if (ele.detachEvent) {
        ele.detachEvent('on' + type, handle);
    } else {
        ele['on'+ type] = null;
    }
}
```

19、取消冒泡的兼容代码；

```js
function stopBubble(e) {
    if (e && e.stopPropagation) {
        e.stopPropagation();
    } else {
        window.event.cancelBubble = true;
    }
}
```

20、检验字符串是否是回文；

```js
function isPalina(str) {
    if (Object.prototype.toString.call(str) !== '[object String') {
        return false;
    }
    let len = str.length;
    for (let i = 0; i < len / 2; i++) {
        if (str[i] != str[len - 1 - i]) {
            return false;
        }
    }
    return true;
}
```

21、检验字符串是否是回文；

```js
function isPalindrome(str) {
    str = str.replace(/\W/g, '').toLowerCase();
    console.log(str);
    return (str == str.split('').reverse().join(''))
}
```

22、兼容getElements By ClassName 方法；

```js
Element.prototype.getElementsByClassName = Document.prototype.getElementsByClassName

```

23、运动函数；

```js

```

24、弹性运动；

```js

```

25、封装自己的forEach 方法；

26、封装自己的filter方法；

27、数组map方法；

28、数组every方法；

29、数组reduce 方法：

30、获取url中的参数；

31、数组排序；

32、遍历 Dom树；

33、原生js封裝 aiax;

34 异步加载script;

35 cookie 管理；

36、实现bind0方法；

37、实现 call（方法；

38、实现applyQ方法；

39、防抖；

40、节流；

41、requestAnimFrame 兼容性方法；

42、cancelAnimFrame 兼容性方法；

43、jsonp 底层方法；

44、获取url上的参数；

45、格式化时间；

46、验证邮箱的正则表达式；

47、函数柯里化；

48、大数相加；

49、单例模式；
