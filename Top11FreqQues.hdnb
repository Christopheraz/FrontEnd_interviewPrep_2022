#前端面试手写题整理

1. 防抖

```js
function debounce(func, ms = 1000) {
    let timer;
    return function (...args) {
        if (timer) {
            clearTimeout(timer)
        }
        timer = setTimeout(() => {
            func.apply(this, args)
        }, ms)
    }
}

//test
const task = () => {
    console.log('run task');
}
const debouncetask = debounce(task, 1000);
// window.addEventListener('scroll', debounceTask)
```

2. 节流

```js
function throttle(func, ms = 1000) {
    let canRun = true;
    return function (...args) {
        if (!canRun) return;
        canRun = false;
        setTimeout(() => {
            func.apply(this, args);
            canRun = true;
        }, ms)
    }
}

//test
const task = () => {
    console.log('run task')
};
const throttleTask = throttle(task, 1000);
// window.addEventListener('scroll', throttleTask);
```

3. New

```js
function myNew(func, args) {
    const instance = {};
    if (func.prototype) {
        Object.setPrototypeOf(instance, func.prototype)
    }
    const res = func.apply(instance, args);
    if (typeof res === "function" || (typeof res === "object" && res !== null)) {
        return res;
    }
}

//test
function Person(name) {
    this.name = name;
}
Person.prototype.sayName = function() {
    console.log(`My name is ${this.name}`);
}
const me = myNew(Person, 'Jack');
me.sayName();
console.log(me);
```

4. Blind 

```js
Function.prototype.myBind = function (context = globalThis) {
    const fn = this;
    const args = Array.from(arguments).slice(1);
    const newFunc = function() {
        const newArgs = args.concat(...arguments);
        if (this instanceof newFunc) {
            //通过new调用，绑定this为实力对象
            fn.apply(this, newArgs);
        }
    }
    //支持new调用方式
    newFunc.prototype = Object.create(fn.prototype);
    return newFunc;
}

//test
const me = {name: 'Jack'};
const other = {name: 'Jackson'};
function say() {
    console.log(`My name is ${this.name || 'default'}`);
}
const meSay = say.myBind(me);
meSay();
const otherSay = say.myBind(other);
otherSay();
```

5. Call 

```js
Function.prototype.myCall = function(context = globalThis) {
    //关键步骤：在context上调用方法，触发this绑定为context， 使用Symbol防止原有属性覆盖
    const key = Symbol('key');
    context[key] = this;
    //es5中可通过for遍历arguments得到参数数组
    const args = [...arguments].slice(1);
    const res = context[key](...args);
    delete context[key];
    return res;
}

//test
const me = {name: 'Jack'};
function say() {
    console.log(`My name is ${this.name || 'default'}`);
}
say.myCall(me);
```

6. Apply

```js
Function.prototype.myApply = function(context = globalThis) {
    //关键步骤：在context上调用方法，触发this绑定为context， 使用Symbol防止原有属性覆盖
    const key = Symbol('key')
    context[key] = this;
    let res;
    if (arguments[1]) {
        res = context[key](...arguments[1]);
    } else {
        res = context[key]();
    }
    delete context[key];
    return res;
}

//test
const me = {name: 'Jack'};
function say() {
    console.log(`My name is ${this.name || 'default'}`);
}
say.myApply(me);
```

7. 柯里化：只传递给函数一部分参数来调用他，让他返回一个函数去处理剩下的参数

```js
function curry(func) {
    return function curried(...args) {
        //function.length 用来获取函数的形参个数；arguments.length获取实参个数
        if (args.length >= func.length) {
            return func.apply(this, args);
        }
        return function(...args2) {
            return curried.apply(this, args.concat(args2))
        }
    }
}

//test
function sum(a, b, c) {
    return a + b + c;
}
const curriedSum = curry(sum);
console.log(curriedSum(1, 2, 3));
console.log(curriedSum(1)(2, 3));
console.log(curriedSum(1),(2),(3));
```

8. 图片懒加载

```js
// <img src = "default.png" data-src = "https://XXXX/real.png">
function isVisible(el) {
    const position = el.getBoundingClientRect();
    const windowHeight = DocumentElement.clientHeight;
    //顶部边缘可见
    const topVisible = position.top > 0 && position.top < windowHeight;
    //底部边缘可见
    const bottomVisible = position.bottom < windowHeight && position.bottom > 0;
    return topVisible || bottomVisible;
}

function imageLazyLoad() {
    const images = document.querySelectorAll('img')
    for (let img of images) {
        const realSrc = img.dataset.src;
        if (!realSrc) continue;
        if (isVisible(img)) {
            img.src = realSrc;
            img.dataset.src = '';
        }
    }
}

//test
// window.addEventListener('load', imageLazyLoad);
// window.addEventListener('scroll', imageLazyLoad);

//or
// window.addEventListener('scroll',throttle(imageLazyLoad, 1000));
```

9. 对象扁平化

```js
function objectFlat(obj = {}) {
    const res = {};
    function flat(item, preKey = '') {
        Object.entries(item).forEach(([key, val]) => {
            const newKey = preKey ? `${preKey}.${key}` : key;
            if (val && typeof val === 'object') {
                flat(val, newKey)
            }
        })
    }
    flat(obj);
    return res;
}

//test
const src = {a: {b: {c: 1, d: 2}, e: 3}, f: {g: 2}};
console.log(objectFlat(src));
```

10. 数组扁平化

```js
//Solution1
function recursionFlat(ary = []) {
    const res = [];
    ary.forEach(item => {
        if (Array.isArray(item)) {
            res.push(...recursionFlat(item));
        } else {
            res.push(item);
        }
    })
    return res;
}
//solution2
function reduceFlat(ary = []) {
    return ary.reduce((res, item) => 
        res.concat(Array.isArray(item) ? reduceFlat(item) : item), [])
}

//test
const src = [1, 2, [3, 4, [5, 6]], '7'];
console.log(recursionFlat(src));
console.log(reduceFlat(src));
```

11. 异步并发数限制

```js
/* 主要步骤：
1. new Promise意境创建，立即执行
2. 使用Promise.reslove().then可以吧任务添加到微任务队列，防止立即执行迭代方法
3. 微任务处理过程中， 产生的新的微任务，会在同一事件循环内，追加到微任务队列里
4. 使用race再某个任务完成时，继续添加任务，保持任务按照最大并发数进行执行
5. 任务完成后，想需要从doingTask中移出 

*/
function limit(count, array, iterateFunc) {
    const task = [];
    const doingTasks = [];
    let i = 0;
    const enqueue = () => {
        if (i === array.length) {
            return Promise.resolve();
        }
        const task = Promise.resolve().then(() => iterateFunc(array[i++]));
        tasks.push(task);
        const doing = task.then(() => doingTasks.splice(doingTasks.indexOf(doing), 1));
        doingTasks.push(doing);
        const res = doingTasks.length >= count ? Promise.race(doingTasks) : Promise.roslove();
        return res.then(enqueue);
    }
    return enqueue().then(() => Promise.all(tasks));
}
```
